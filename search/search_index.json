{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Longleaf Project Overview Welcome to the Longleaf Project Documentation site. This site contains supporting documentation for the Longleaf software project, currently in development by The University of North Carolina at Chapel Hill's University Libraries. Longleaf is free, open-source software for creating highly configurable digital preservation environments. Longleaf provides a repository-agnostic command-line utility that enables users to configure and apply preservation processes such as monitoring and replication at the file level. Users can define preservation services using Longleaf's base set of commands, and then apply these preservation scripts to a set of user-defined storage locations that are relevant to the user's specific context. For a step-by-step tutorial of Longleaf's basic functionality, the \"Basic Usage\" page in this site walks through Longleaf's core operations using a pre-configured example data directory. Project URLs Code repository Longleaf-preservation Project Participants Ben Pennell, Technical lead and software developer Jason Casden, Product lead Morgan McKeehan, Documentation lead","title":"Welcome"},{"location":"#longleaf-project-overview","text":"Welcome to the Longleaf Project Documentation site. This site contains supporting documentation for the Longleaf software project, currently in development by The University of North Carolina at Chapel Hill's University Libraries. Longleaf is free, open-source software for creating highly configurable digital preservation environments. Longleaf provides a repository-agnostic command-line utility that enables users to configure and apply preservation processes such as monitoring and replication at the file level. Users can define preservation services using Longleaf's base set of commands, and then apply these preservation scripts to a set of user-defined storage locations that are relevant to the user's specific context. For a step-by-step tutorial of Longleaf's basic functionality, the \"Basic Usage\" page in this site walks through Longleaf's core operations using a pre-configured example data directory.","title":"Longleaf Project Overview"},{"location":"#project-urls","text":"Code repository Longleaf-preservation","title":"Project URLs"},{"location":"#project-participants","text":"Ben Pennell, Technical lead and software developer Jason Casden, Product lead Morgan McKeehan, Documentation lead","title":"Project Participants"},{"location":"aboutlongleaf/","text":"About Longleaf Longleaf, developed at the University of North Carolina at Chapel Hill University Libraries, is an open-source, portable digital preservation tool, designed to enable the creation and application of highly configurable preservation plans for large and varied collections of digital content across multiple systems. Longleaf addresses challenges we have encountered over the past 20 years of growing and managing our digital collections infrastructure, which we feel are shared by other institutions: Preservation activities being applied to files based on system affiliation (i.e. repository platform or lack thereof) rather than the needs of the content. Difficulty maintaining an ideal schedule of fixity checks as the sizes of our collections grow. Physical and computational costs to servers and storage devices imposed by ongoing cryptographic checksum algorithms (Altman et al., 2013). Difficulty gradually introducing cloud storage services into our replication strategy for vulnerable files. The goal for Longleaf is to provide organizations with a flexible tool for creating and implementing tailored preservation practices across the scope of their content, based on appropriate levels of digital preservation need (Phillips, Bailey, Goethals, & Owens, 2013). To this end, we have designed Longleaf according to the principles of high \u201csoftware availability\u201d (Davidson & Casden, 2016) that prioritize ease of use by a broad set of users in a variety of environments. The Longleaf application is a command-line utility that will run on any modern Linux operating system with only a ruby interpreter. Longleaf can be applied to any content storage system with a file system, and requires no repository, no external database, and no storage system other than the file system. It can be run completely from the command line or triggered by arbitrary external systems (e.g. initiated on file ingest). Preservation processes are targeted at the file and storage level rather than through a repository system intermediary, allowing files managed in temporary storage or non-preservation asset management systems to benefit from the same replication and verification processes as those ingested into preservation repositories. For example, in our own digital collections context, we will be applying Longleaf to content across a wide variety of systems, including files managed entirely on shared drives, files managed by Fedora-based repositories, as well as digitization masters managed by CONTENTdm. Longleaf\u2019s modular architecture and flexible configuration system reduce the interference of repository system constraints, to enable needs-based digital preservation planning processes such as evaluating and configuring specific preservation activities across subsets of larger collections. For our collections, we are using Longleaf to begin addressing specific challenges such as managing the physical and computational costs of large-scale fixity verification, and integrating storage endpoints with different access costs. For example, we are increasing coverage of ongoing and transactional fixity checks (Gallinger, Bailey, Cariani, Owens, & Altman, 2017) by providing typical cryptographic checksums alongside more scaleable non-cryptographic checks and filesystem checks. We can also determine more appropriate replication and verification schedules and techniques overall, based on the characteristics of both the source and destination storage locations for content. References Altman, M., Bailey, J., Cariani, K., Gallinger, M., Mandelbaum, J., & Owens, T. (2013). NDSA Storage Report: Reflections on National Digital Stewardship Alliance Member Approaches to Preservation Storage Technologies. D-Lib Magazine, 19(5/6). https://doi.org/10.1045/may2013-altman Davidson, B., & Casden, J. (2016). Beyond open source. Code4Lib Journal, Issue 31. Retrieved from http://journal.code4lib.org/articles/11148 Gallinger, M., Bailey, J., Cariani, K., Owens, T., & Altman, M. (2017). Trends in Digital Preservation Capacity and Practice: Results from the 2nd Bi-annual National Digital Stewardship Alliance Storage Survey. D-Lib Magazine, 23(7/8). https://doi.org/10.1045/july2017-gallinger Phillips, M., Bailey, J., Goethals, A., & Owens, T. (2013). The NDSA levels of digital preservation: Explanation and uses. In Archiving Conference (Vol. 2013, pp. 216\u2013222). Society for Imaging Science and Technology.","title":"About Longleaf"},{"location":"aboutlongleaf/#about-longleaf","text":"Longleaf, developed at the University of North Carolina at Chapel Hill University Libraries, is an open-source, portable digital preservation tool, designed to enable the creation and application of highly configurable preservation plans for large and varied collections of digital content across multiple systems. Longleaf addresses challenges we have encountered over the past 20 years of growing and managing our digital collections infrastructure, which we feel are shared by other institutions: Preservation activities being applied to files based on system affiliation (i.e. repository platform or lack thereof) rather than the needs of the content. Difficulty maintaining an ideal schedule of fixity checks as the sizes of our collections grow. Physical and computational costs to servers and storage devices imposed by ongoing cryptographic checksum algorithms (Altman et al., 2013). Difficulty gradually introducing cloud storage services into our replication strategy for vulnerable files. The goal for Longleaf is to provide organizations with a flexible tool for creating and implementing tailored preservation practices across the scope of their content, based on appropriate levels of digital preservation need (Phillips, Bailey, Goethals, & Owens, 2013). To this end, we have designed Longleaf according to the principles of high \u201csoftware availability\u201d (Davidson & Casden, 2016) that prioritize ease of use by a broad set of users in a variety of environments. The Longleaf application is a command-line utility that will run on any modern Linux operating system with only a ruby interpreter. Longleaf can be applied to any content storage system with a file system, and requires no repository, no external database, and no storage system other than the file system. It can be run completely from the command line or triggered by arbitrary external systems (e.g. initiated on file ingest). Preservation processes are targeted at the file and storage level rather than through a repository system intermediary, allowing files managed in temporary storage or non-preservation asset management systems to benefit from the same replication and verification processes as those ingested into preservation repositories. For example, in our own digital collections context, we will be applying Longleaf to content across a wide variety of systems, including files managed entirely on shared drives, files managed by Fedora-based repositories, as well as digitization masters managed by CONTENTdm. Longleaf\u2019s modular architecture and flexible configuration system reduce the interference of repository system constraints, to enable needs-based digital preservation planning processes such as evaluating and configuring specific preservation activities across subsets of larger collections. For our collections, we are using Longleaf to begin addressing specific challenges such as managing the physical and computational costs of large-scale fixity verification, and integrating storage endpoints with different access costs. For example, we are increasing coverage of ongoing and transactional fixity checks (Gallinger, Bailey, Cariani, Owens, & Altman, 2017) by providing typical cryptographic checksums alongside more scaleable non-cryptographic checks and filesystem checks. We can also determine more appropriate replication and verification schedules and techniques overall, based on the characteristics of both the source and destination storage locations for content.","title":"About Longleaf"},{"location":"aboutlongleaf/#references","text":"Altman, M., Bailey, J., Cariani, K., Gallinger, M., Mandelbaum, J., & Owens, T. (2013). NDSA Storage Report: Reflections on National Digital Stewardship Alliance Member Approaches to Preservation Storage Technologies. D-Lib Magazine, 19(5/6). https://doi.org/10.1045/may2013-altman Davidson, B., & Casden, J. (2016). Beyond open source. Code4Lib Journal, Issue 31. Retrieved from http://journal.code4lib.org/articles/11148 Gallinger, M., Bailey, J., Cariani, K., Owens, T., & Altman, M. (2017). Trends in Digital Preservation Capacity and Practice: Results from the 2nd Bi-annual National Digital Stewardship Alliance Storage Survey. D-Lib Magazine, 23(7/8). https://doi.org/10.1045/july2017-gallinger Phillips, M., Bailey, J., Goethals, A., & Owens, T. (2013). The NDSA levels of digital preservation: Explanation and uses. In Archiving Conference (Vol. 2013, pp. 216\u2013222). Society for Imaging Science and Technology.","title":"References"},{"location":"install/","text":"Installing Longleaf Ruby and other Prerequisites Longleaf requires Ruby 2.3 or higher. There also are optional gem dependencies if the user wishes to use an index to improve performance. Additionally, Longleaf scripts rely on common Unix programs. In Mac OS X and Linux operating systems, these programs will likely already be installed, but some of these tools, such as rsync may be missing from a Windows system unless you have installed them. Download Longleaf Download Longleaf from UNC Chapel Hill's University Libraries Longleaf github repository . Install Longleaf There are two ways to install Longleaf, depending on how you intend to use it: 1. Standalone gem To use Longleaf as a command-line application, the gem can be installed using: $ gem install longleaf Or it may be built from source: $ git clone git@github.com:UNC-Libraries/longleaf-preservation.git $ cd longleaf-preservation $ bin/setup --system $ bundle exec rake install # builds the gem $ gem install --local pkg/longleaf* # installs gem 2. Application dependency To include longleaf as a dependency in an application, add this line to your application's Gemfile: gem 'longleaf' And then execute: $ bundle Confirm Longleaf Installation If you have installed Longleaf using the \"Standalone gem\" approach, you can check to make sure that the installation succeeded by typing the following into your terminal: longleaf You should see the Longleaf help page: Commands: longleaf --version # Prints the Longleaf version number. longleaf deregister # Deregister files with Longleaf longleaf help [COMMAND] # Describe available commands or one specific command longleaf preserve # Perform preservation services on files with Longleaf longleaf register # Register files with Longleaf longleaf reindex # Perform a full reindex of file metadata stored within the configured storage locations. longleaf setup_index # Sets up the structure of the metadata index, if one is configured using the system configuration file provide... longleaf validate_config # Validate an application configuration file, provided using --config. longleaf validate_metadata # Validate metadata files. Installation Success! If the Longleaf Help page printed successfully, you are ready to proceed to the Basic Usage tutorial to try out basic Longleaf functionality.","title":"Installation"},{"location":"install/#installing-longleaf","text":"","title":"Installing Longleaf"},{"location":"install/#ruby-and-other-prerequisites","text":"Longleaf requires Ruby 2.3 or higher. There also are optional gem dependencies if the user wishes to use an index to improve performance. Additionally, Longleaf scripts rely on common Unix programs. In Mac OS X and Linux operating systems, these programs will likely already be installed, but some of these tools, such as rsync may be missing from a Windows system unless you have installed them.","title":"Ruby and other Prerequisites"},{"location":"install/#download-longleaf","text":"Download Longleaf from UNC Chapel Hill's University Libraries Longleaf github repository .","title":"Download Longleaf"},{"location":"install/#install-longleaf","text":"There are two ways to install Longleaf, depending on how you intend to use it: 1. Standalone gem To use Longleaf as a command-line application, the gem can be installed using: $ gem install longleaf Or it may be built from source: $ git clone git@github.com:UNC-Libraries/longleaf-preservation.git $ cd longleaf-preservation $ bin/setup --system $ bundle exec rake install # builds the gem $ gem install --local pkg/longleaf* # installs gem 2. Application dependency To include longleaf as a dependency in an application, add this line to your application's Gemfile: gem 'longleaf' And then execute: $ bundle","title":"Install Longleaf"},{"location":"install/#confirm-longleaf-installation","text":"If you have installed Longleaf using the \"Standalone gem\" approach, you can check to make sure that the installation succeeded by typing the following into your terminal: longleaf You should see the Longleaf help page: Commands: longleaf --version # Prints the Longleaf version number. longleaf deregister # Deregister files with Longleaf longleaf help [COMMAND] # Describe available commands or one specific command longleaf preserve # Perform preservation services on files with Longleaf longleaf register # Register files with Longleaf longleaf reindex # Perform a full reindex of file metadata stored within the configured storage locations. longleaf setup_index # Sets up the structure of the metadata index, if one is configured using the system configuration file provide... longleaf validate_config # Validate an application configuration file, provided using --config. longleaf validate_metadata # Validate metadata files.","title":"Confirm Longleaf Installation"},{"location":"install/#installation-success","text":"If the Longleaf Help page printed successfully, you are ready to proceed to the Basic Usage tutorial to try out basic Longleaf functionality.","title":"Installation Success!"},{"location":"quickstart/","text":"Longleaf basic usage tutorial This tutorial provides an introduction to the basic functionality of Longleaf by demonstrating how to configure and execute a small set of preservation tasks, using an example data directory as a local sandbox on your own computer. Longleaf basic usage tasks covered in this tutorial: Validate the mandatory Longleaf configuration file that contains the storage locations and preservation activities you will use Register example data files Validate metadata for registered files Run a Preservation action on example data files Alter an example data file to cause an error; catch the error by re-running the Preservation action Re-register the altered file, and preserve the file in its new, altered state System Requirements for this tutorial Longleaf scripts rely on common UNIX programs. In Mac OS X and Linux operating systems, these programs will likely already be installed, but some of these tools, such as rsync may be missing from a Windows system unless you have installed it. Example data directory for this tutorial The example data directory for this tutorial is named 'll-example'; it is located in the 'docs' folder of the longleaf-preservation repository. The 'll-example' directory contains all the materials required for completing this tutorial: an example configuration file, 'config-example-relative.yml', that is pre-configured for tutorial tasks a folder of example data files to be preserved empty scaffolding folders that will be used for storing: 1) metadata files about the original data files, 2) the replicated data files created from the originals, and 3) metadata files about the replicated data files. folder structure of 'll-example' directory: materials for tutorial tasks \u2514\u2500\u2500\u2500ll-example \u2502 config-example-relative.yml \u2502 \u251c\u2500\u2500\u2500files-dir \u2502 LLexample-PDF.pdf \u2502 LLexample-TOCHANGE.txt \u2502 LLexample-tokeep.txt \u2502 \u251c\u2500\u2500\u2500metadata-dir \u2502 \u2502 \u251c\u2500\u2500\u2500replica-files \u2502 \u2502 \u2514\u2500\u2500\u2500replica-metadata Subdirectories in 'll-example' are used as follows: 'files-dir' Contains three example data files that will be preserved and replicated. 'metadata-dir' Empty at start of tutorial; metadata files about the data files in 'files-dir' will be stored and automatically updated in this directory during Register and Preserve actions. 'replica-files' Empty at start of tutorial; replicated data files (copies) created during Preserve actions run on the data files in 'files-dir' will be stored in this directory. 'replica-metadata' Empty at start of tutorial; metadata files about the replicated data files in 'replica-files' will be stored in this directory. Set up your local sandbox: copy the example data directory to your Desktop Copy the 'll-example' directory to a location where it will be easy to access and work with. For example,it might be convenient to copy 'll-example' to your 'Desktop' location. Note: All paths in the commands in this tutorial are relative to the 'll-example' folder itself, so if you execute commands from within 'll-example,' you can use the paths as shown with no alterations. Review the example Longleaf configuration file Locations The example configuration file references storage locations based on the subdirectory names in 'll-example': The 'data-directory' location points to 'files-dir' as the location of the original data files to be preserved, and 'metadata-dir' for storing metadata files created about these original data files. The 'backup-directory' location refers to the 'replica-files' folder as the storage location where the copies of the original files will be stored, and 'replica-metadata' for metadata files. Services The 'services' area in the configuration file defines characteristics of work scripts, such as the target storage location for the replication script, and the checksum algorithm for the fixity script. Service Mappings The 'service-mappings' area specifies which services will run at a particular storage location. In the example configuration file, for example, the services 'example_replication' and 'example_fixity' are assigned to run at location 'data-directory'. At location 'backup_directory', however, only 'example_fixity' is assigned to run, so files there will have fixity checks, but will not get replicated. locations: data-directory services: - example_replication - example_fixity - locations: backup-directory services: - example_fixity Relative Paths in the Configuration File Storage locations in this configuration file specify paths relative to the location of the configuration file itself, and will also be evaluated relative to the location of the configuration file itself when Longleaf commands are run. In this tutorial, the configuration file is located inside 'll-example', at the same level as the data and metadata folders. Check that you can run Longleaf, by viewing the help text page Once you have copied the 'll-example' directory to an accessible working location, and have familiarized yourself with the configuration yaml file, you are ready to start using Longleaf! First confirm that you can run Longleaf, as you did in the \"Installation Instructions\" page of this site. Open a terminal window and cd into the 'll-example' directory, then enter the command 'longleaf', with no arguments: longleaf This command will output the help page text, showing all available commands. Validate the example configuration file Next, you will validate the Longleaf configuration file, to ensure that storage locations and paths are correctly specified and accessible. As noted above, all paths in this tutorial are relative to the 'll-example' directory, so make sure that you execute commands from within that directory, or amend paths accordingly. Command for validating configuration file: longleaf validate_config -c config-example-relative.yml Successful validation of the configuration file outputs the following message in terminal: SUCCESS: Application configuration passed validation: config-example-relative.yml Register example data files Once the configuration file has been validated, you can proceed to registering the example data files, so that they are ready for further preservation actions with Longleaf. Note that Longleaf commands can be run on directories, or individual files. For example, when using the Register command, you can either: register a whole directory at once, which will individually register every file in that directory or register individual files. In this example of using the Register command, we will register an entire directory of files by specifying the directory path. Use command: longleaf register -c config-example-relative.yml -f files-dir If files successfully registered, Longleaf will list the registration outcome for each file within the directory: SUCCESS register /data/ll-example/files-dir/LLexample-PDF.pdf SUCCESS register /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS register /data/ll-example/files-dir/LLexample-tokeep.txt Validate the new metadata files Validate the metadata files that were created for the files you just registered. Use command: longleaf validate_metadata -c config-example-relative.yml -f files-dir Confirmation of validation for the metadata files: SUCCESS: Metadata for file passed validation: /data/ll-example/files-dir/LLexample-PDF.pdf SUCCESS: Metadata for file passed validation: /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS: Metadata for file passed validation: /data/ll-example/files-dir/LLexample-tokeep.txt Run the Preserve command, to replicate and check fixity on the registered files. Use command: longleaf preserve -c config-example-relative.yml -f files-dir Confirmation of successful Preservation action completed on all files in the files-dir directory: SUCCESS register /data/ll-example/replica-files/LLexample-PDF.pdf SUCCESS preserve[example_replication] /data/ll-example/files-dir/LLexample-PDF.pdf SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-PDF.pdf SUCCESS register /data/ll-example/replica-files/LLexample-TOCHANGE.txt SUCCESS preserve[example_replication] /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS register /data/ll-example/replica-files/LLexample-tokeep.txt SUCCESS preserve[example_replication] /data/ll-example/files-dir/LLexample-tokeep.txt SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-tokeep.txt Look at the output of the Preserve command Take a look at the SUCCESS output messages from the preserve command above. Notice that for each file included in the Preservation action, Longleaf indicates \"SUCCESS\" for the \"register\" and \"preserve\" components of the Preservation action, as well as the individual scripts within the \"preserve\" component. Also take a look inside the subfolders in your 'll-example' sandbox folder, using Finder or command-line tools. You'll notice that there are newly-created data files and metadata files in the 'replica-' directories. The original data files from 'files-dir' have been copied to the 'replica-files' directory, and metadata files for those copies have been created in the 'replica-metadata' directory. Re-run the Preserve command, to check the integrity of the files that are being preserved. Since the 'example_fixity' script in our example configuration file is set to frequency: 30 seconds, we can check fixity on the preserved files once 30 seconds have elapsed since the last preservation action. Use command: longleaf preserve -c config-example-relative.yml -f files-dir Success output message: SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-PDF.pdf SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-tokeep.txt Note that the output in terminal window is much shorter than the first preserve command. This output only shows \"SUCCESS\" and preserve[example_fixity] for each file. This time register and replication are not included because those actions already ran, and do not need to run this time. Only fixity checks ran in this Preserve action. In the finder window, notice that the Date Modified is updated on the metadata files in the metadata-dir. The metadata files for the original data files are updated to reflect these Preservation actions running. Cause a change to a file, and catch the change with the Preservation command. Now make a change to one of the files that is being preserved, which you will then catch by re-running preserve on the storage directory for that file. Open up the file: 'll-example/files-dir/LLexample-TOCHANGE.txt'. On line 4 of the text file, you'll see \"( insert changed text ) \". Insert your cursor near this line, and type something to make a change to the file. Then save the file and close it. In your 'll-example/files-dir' directory, notice that the Date Modified has changed for this file. Run the preserve command again. This time it will fail, because one of the files under preservation has been altered since the file's last checksums were recorded. Use command: longleaf preserve -c config-example-relative.yml -f files-dir Output showing failed fixity check on the file 'll-example/files-dir/LLexample-TOCHANGE.txt': SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-PDF.pdf FAILURE preserve[example_fixity] /data/ll-example/files-dir/LLexample-TOCHANGE.txt: Fixity check using algorithm 'sha1' failed for file /data/ll-example/files-dir/LLexample-TOCHANGE.txt: expected 'effa1bfc1b93f1260a36044bcd668240cf14738a', calculated 'cd5e53f6945ceda2d90b003a39af509d7acb068f.' SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-tokeep.txt Re-register the altered file. Now you will re-register the altered file, using the --force option for the register command. Run this registration command at the file level so that only this file is re-registered, not the entire directory. Re-registration will update the file's preservation metadata to the new state of 'LLexample-TOCHANGE.txt'. Note, however, that the re-registered altered file (ll-example/files-dir/LLexample-TOCHANGE.txt) will still not match the copy of LLexample-TOCHANGE.txt that is stored in \"replica-files\" (ll-example/replica-files/LLexample-TOCHANGE.txt), because the replica copy was created earlier, from the unaltered original file. Use command: longleaf register -c config-example-relative.yml -f files-dir/LLexample-TOCHANGE.txt --force Success output message: SUCCESS register /data/ll-example/files-dir/LLexample-TOCHANGE.txt Run Preserve on the re-registered file. Running preserve on the re-registered altered file will replicate the new state of this file to the copied data location. As with register --force , run preserve at the file level, not the directory. Use command: longleaf preserve -c config-example-relative.yml -f files-dir/LLexample-TOCHANGE.txt The terminal output shows the new registration of the file, and the replication and fixity scripts running on this file. In finder, you can see that the Date Modified of the 'll-example-TOCHANGE.txt' file in the 'replica-files' directory now matches the original file. Open up 'replica-files/ll-example-TOCHANGE.txt' and you'll see the added line of text in this file. Successful preservation of re-registered changed file: SUCCESS register /data/ll-example/replica-files/LLexample-TOCHANGE.txt SUCCESS preserve[example_replication] /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-TOCHANGE.txt Re-run Preserve at the directory level to check all three files. After the 30-sec fixity check interval has elapsed, re-run the preserve command at the directory level as before, and now all three files pass again. Use command: longleaf preserve -c config-example-relative.yml -f files-dir Success output message: SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-PDF.pdf SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-tokeep.txt","title":"Basic Usage"},{"location":"quickstart/#longleaf-basic-usage-tutorial","text":"This tutorial provides an introduction to the basic functionality of Longleaf by demonstrating how to configure and execute a small set of preservation tasks, using an example data directory as a local sandbox on your own computer. Longleaf basic usage tasks covered in this tutorial: Validate the mandatory Longleaf configuration file that contains the storage locations and preservation activities you will use Register example data files Validate metadata for registered files Run a Preservation action on example data files Alter an example data file to cause an error; catch the error by re-running the Preservation action Re-register the altered file, and preserve the file in its new, altered state","title":"Longleaf basic usage tutorial"},{"location":"quickstart/#system-requirements-for-this-tutorial","text":"Longleaf scripts rely on common UNIX programs. In Mac OS X and Linux operating systems, these programs will likely already be installed, but some of these tools, such as rsync may be missing from a Windows system unless you have installed it.","title":"System Requirements for this tutorial"},{"location":"quickstart/#example-data-directory-for-this-tutorial","text":"The example data directory for this tutorial is named 'll-example'; it is located in the 'docs' folder of the longleaf-preservation repository. The 'll-example' directory contains all the materials required for completing this tutorial: an example configuration file, 'config-example-relative.yml', that is pre-configured for tutorial tasks a folder of example data files to be preserved empty scaffolding folders that will be used for storing: 1) metadata files about the original data files, 2) the replicated data files created from the originals, and 3) metadata files about the replicated data files. folder structure of 'll-example' directory: materials for tutorial tasks \u2514\u2500\u2500\u2500ll-example \u2502 config-example-relative.yml \u2502 \u251c\u2500\u2500\u2500files-dir \u2502 LLexample-PDF.pdf \u2502 LLexample-TOCHANGE.txt \u2502 LLexample-tokeep.txt \u2502 \u251c\u2500\u2500\u2500metadata-dir \u2502 \u2502 \u251c\u2500\u2500\u2500replica-files \u2502 \u2502 \u2514\u2500\u2500\u2500replica-metadata Subdirectories in 'll-example' are used as follows: 'files-dir' Contains three example data files that will be preserved and replicated. 'metadata-dir' Empty at start of tutorial; metadata files about the data files in 'files-dir' will be stored and automatically updated in this directory during Register and Preserve actions. 'replica-files' Empty at start of tutorial; replicated data files (copies) created during Preserve actions run on the data files in 'files-dir' will be stored in this directory. 'replica-metadata' Empty at start of tutorial; metadata files about the replicated data files in 'replica-files' will be stored in this directory.","title":"Example data directory for this tutorial"},{"location":"quickstart/#set-up-your-local-sandbox-copy-the-example-data-directory-to-your-desktop","text":"Copy the 'll-example' directory to a location where it will be easy to access and work with. For example,it might be convenient to copy 'll-example' to your 'Desktop' location. Note: All paths in the commands in this tutorial are relative to the 'll-example' folder itself, so if you execute commands from within 'll-example,' you can use the paths as shown with no alterations.","title":"Set up your local sandbox: copy the example data directory to your Desktop"},{"location":"quickstart/#review-the-example-longleaf-configuration-file","text":"Locations The example configuration file references storage locations based on the subdirectory names in 'll-example': The 'data-directory' location points to 'files-dir' as the location of the original data files to be preserved, and 'metadata-dir' for storing metadata files created about these original data files. The 'backup-directory' location refers to the 'replica-files' folder as the storage location where the copies of the original files will be stored, and 'replica-metadata' for metadata files. Services The 'services' area in the configuration file defines characteristics of work scripts, such as the target storage location for the replication script, and the checksum algorithm for the fixity script. Service Mappings The 'service-mappings' area specifies which services will run at a particular storage location. In the example configuration file, for example, the services 'example_replication' and 'example_fixity' are assigned to run at location 'data-directory'. At location 'backup_directory', however, only 'example_fixity' is assigned to run, so files there will have fixity checks, but will not get replicated. locations: data-directory services: - example_replication - example_fixity - locations: backup-directory services: - example_fixity Relative Paths in the Configuration File Storage locations in this configuration file specify paths relative to the location of the configuration file itself, and will also be evaluated relative to the location of the configuration file itself when Longleaf commands are run. In this tutorial, the configuration file is located inside 'll-example', at the same level as the data and metadata folders.","title":"Review the example Longleaf configuration file"},{"location":"quickstart/#check-that-you-can-run-longleaf-by-viewing-the-help-text-page","text":"Once you have copied the 'll-example' directory to an accessible working location, and have familiarized yourself with the configuration yaml file, you are ready to start using Longleaf! First confirm that you can run Longleaf, as you did in the \"Installation Instructions\" page of this site. Open a terminal window and cd into the 'll-example' directory, then enter the command 'longleaf', with no arguments: longleaf This command will output the help page text, showing all available commands.","title":"Check that you can run Longleaf, by viewing the help text page"},{"location":"quickstart/#validate-the-example-configuration-file","text":"Next, you will validate the Longleaf configuration file, to ensure that storage locations and paths are correctly specified and accessible. As noted above, all paths in this tutorial are relative to the 'll-example' directory, so make sure that you execute commands from within that directory, or amend paths accordingly. Command for validating configuration file: longleaf validate_config -c config-example-relative.yml Successful validation of the configuration file outputs the following message in terminal: SUCCESS: Application configuration passed validation: config-example-relative.yml","title":"Validate the example configuration file"},{"location":"quickstart/#register-example-data-files","text":"Once the configuration file has been validated, you can proceed to registering the example data files, so that they are ready for further preservation actions with Longleaf. Note that Longleaf commands can be run on directories, or individual files. For example, when using the Register command, you can either: register a whole directory at once, which will individually register every file in that directory or register individual files. In this example of using the Register command, we will register an entire directory of files by specifying the directory path. Use command: longleaf register -c config-example-relative.yml -f files-dir If files successfully registered, Longleaf will list the registration outcome for each file within the directory: SUCCESS register /data/ll-example/files-dir/LLexample-PDF.pdf SUCCESS register /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS register /data/ll-example/files-dir/LLexample-tokeep.txt","title":"Register example data files"},{"location":"quickstart/#validate-the-new-metadata-files","text":"Validate the metadata files that were created for the files you just registered. Use command: longleaf validate_metadata -c config-example-relative.yml -f files-dir Confirmation of validation for the metadata files: SUCCESS: Metadata for file passed validation: /data/ll-example/files-dir/LLexample-PDF.pdf SUCCESS: Metadata for file passed validation: /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS: Metadata for file passed validation: /data/ll-example/files-dir/LLexample-tokeep.txt","title":"Validate the new metadata files"},{"location":"quickstart/#run-the-preserve-command-to-replicate-and-check-fixity-on-the-registered-files","text":"Use command: longleaf preserve -c config-example-relative.yml -f files-dir Confirmation of successful Preservation action completed on all files in the files-dir directory: SUCCESS register /data/ll-example/replica-files/LLexample-PDF.pdf SUCCESS preserve[example_replication] /data/ll-example/files-dir/LLexample-PDF.pdf SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-PDF.pdf SUCCESS register /data/ll-example/replica-files/LLexample-TOCHANGE.txt SUCCESS preserve[example_replication] /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS register /data/ll-example/replica-files/LLexample-tokeep.txt SUCCESS preserve[example_replication] /data/ll-example/files-dir/LLexample-tokeep.txt SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-tokeep.txt","title":"Run the Preserve command, to replicate and check fixity on the registered files."},{"location":"quickstart/#look-at-the-output-of-the-preserve-command","text":"Take a look at the SUCCESS output messages from the preserve command above. Notice that for each file included in the Preservation action, Longleaf indicates \"SUCCESS\" for the \"register\" and \"preserve\" components of the Preservation action, as well as the individual scripts within the \"preserve\" component. Also take a look inside the subfolders in your 'll-example' sandbox folder, using Finder or command-line tools. You'll notice that there are newly-created data files and metadata files in the 'replica-' directories. The original data files from 'files-dir' have been copied to the 'replica-files' directory, and metadata files for those copies have been created in the 'replica-metadata' directory.","title":"Look at the output of the Preserve command"},{"location":"quickstart/#re-run-the-preserve-command-to-check-the-integrity-of-the-files-that-are-being-preserved","text":"Since the 'example_fixity' script in our example configuration file is set to frequency: 30 seconds, we can check fixity on the preserved files once 30 seconds have elapsed since the last preservation action. Use command: longleaf preserve -c config-example-relative.yml -f files-dir Success output message: SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-PDF.pdf SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-tokeep.txt Note that the output in terminal window is much shorter than the first preserve command. This output only shows \"SUCCESS\" and preserve[example_fixity] for each file. This time register and replication are not included because those actions already ran, and do not need to run this time. Only fixity checks ran in this Preserve action. In the finder window, notice that the Date Modified is updated on the metadata files in the metadata-dir. The metadata files for the original data files are updated to reflect these Preservation actions running.","title":"Re-run the Preserve command, to check the integrity of the files that are being preserved."},{"location":"quickstart/#cause-a-change-to-a-file-and-catch-the-change-with-the-preservation-command","text":"Now make a change to one of the files that is being preserved, which you will then catch by re-running preserve on the storage directory for that file. Open up the file: 'll-example/files-dir/LLexample-TOCHANGE.txt'. On line 4 of the text file, you'll see \"( insert changed text ) \". Insert your cursor near this line, and type something to make a change to the file. Then save the file and close it. In your 'll-example/files-dir' directory, notice that the Date Modified has changed for this file. Run the preserve command again. This time it will fail, because one of the files under preservation has been altered since the file's last checksums were recorded. Use command: longleaf preserve -c config-example-relative.yml -f files-dir Output showing failed fixity check on the file 'll-example/files-dir/LLexample-TOCHANGE.txt': SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-PDF.pdf FAILURE preserve[example_fixity] /data/ll-example/files-dir/LLexample-TOCHANGE.txt: Fixity check using algorithm 'sha1' failed for file /data/ll-example/files-dir/LLexample-TOCHANGE.txt: expected 'effa1bfc1b93f1260a36044bcd668240cf14738a', calculated 'cd5e53f6945ceda2d90b003a39af509d7acb068f.' SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-tokeep.txt","title":"Cause a change to a file, and catch the change with the Preservation command."},{"location":"quickstart/#re-register-the-altered-file","text":"Now you will re-register the altered file, using the --force option for the register command. Run this registration command at the file level so that only this file is re-registered, not the entire directory. Re-registration will update the file's preservation metadata to the new state of 'LLexample-TOCHANGE.txt'. Note, however, that the re-registered altered file (ll-example/files-dir/LLexample-TOCHANGE.txt) will still not match the copy of LLexample-TOCHANGE.txt that is stored in \"replica-files\" (ll-example/replica-files/LLexample-TOCHANGE.txt), because the replica copy was created earlier, from the unaltered original file. Use command: longleaf register -c config-example-relative.yml -f files-dir/LLexample-TOCHANGE.txt --force Success output message: SUCCESS register /data/ll-example/files-dir/LLexample-TOCHANGE.txt","title":"Re-register the altered file."},{"location":"quickstart/#run-preserve-on-the-re-registered-file","text":"Running preserve on the re-registered altered file will replicate the new state of this file to the copied data location. As with register --force , run preserve at the file level, not the directory. Use command: longleaf preserve -c config-example-relative.yml -f files-dir/LLexample-TOCHANGE.txt The terminal output shows the new registration of the file, and the replication and fixity scripts running on this file. In finder, you can see that the Date Modified of the 'll-example-TOCHANGE.txt' file in the 'replica-files' directory now matches the original file. Open up 'replica-files/ll-example-TOCHANGE.txt' and you'll see the added line of text in this file. Successful preservation of re-registered changed file: SUCCESS register /data/ll-example/replica-files/LLexample-TOCHANGE.txt SUCCESS preserve[example_replication] /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-TOCHANGE.txt","title":"Run Preserve on the re-registered file."},{"location":"quickstart/#re-run-preserve-at-the-directory-level-to-check-all-three-files","text":"After the 30-sec fixity check interval has elapsed, re-run the preserve command at the directory level as before, and now all three files pass again. Use command: longleaf preserve -c config-example-relative.yml -f files-dir Success output message: SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-PDF.pdf SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-TOCHANGE.txt SUCCESS preserve[example_fixity] /data/ll-example/files-dir/LLexample-tokeep.txt","title":"Re-run Preserve at the directory level to check all three files."}]}