var search_data = {"index":{"searchIndex":["af","appdeserializer","appvalidator","errno","fixitycheckservice","longleaf","abstractcommand","appfields","applicationconfigdeserializer","applicationconfigmanager","applicationconfigvalidator","cli","checksummismatcherror","configbuilder","configurationerror","configurationvalidator","eventerror","eventnames","filehelpers","filerecord","fileselector","fixitycheckservice","invalidstoragepatherror","logging","redirectinglogger","longleaferror","mdfields","metadatadeserializer","mdf","metadataerror","metadatarecord","metadataserializer","mdf","preservationserviceerror","rspec","registercommand","registerevent","registrationerror","servicecandidatefilesystemiterator","servicecandidatelocator","servicedatehelper","servicedefinition","servicedefinitionmanager","servicedefinitionvalidator","servicefields","servicemanager","servicemappingmanager","servicemappingvalidator","servicerecord","storagelocation","storagelocationmanager","storagelocationunavailableerror","storagelocationvalidator","storagepathvalidator","validateconfigcommand","mdf","object","[]()","[]=()","add_service()","add_to_timestamp()","applicable_for_event?()","assert()","available?()","candidate_iterator()","create_metadata()","create_test_file()","create_test_file()","debug()","deregistered?()","deserialize()","deserialize()","each()","error()","execute()","execute()","failure()","fatal()","from_yaml()","get()","get_location_by_path()","get_metadata_path_for()","info()","initialize_logger()","initialize_logger()","is_applicable?()","list_service_definitions()","list_services()","list_services()","load()","load_metadata_record()","logger()","logger()","make_file_record()","make_service_def()","make_test_dir()","make_test_dir()","make_test_file()","map_services()","metadata_created()","metadata_path()","metadata_suffix()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_candidate()","next_path()","outcome()","perform()","perform()","record_failure()","record_success()","register()","registered?()","return_status()","service()","setup_logger()","storage_locations()","success()","target_paths()","to_hash()","to_yaml()","unknown()","update_metadata_record()","validate()","validate()","validate_config()","validate_config()","validate_config()","validate_config()","verify_path_in_location()","warn()","with_location()","with_locations()","with_mappings()","with_service()","with_services()","write()","write_metadata()","write_to_yaml_file()","gemfile","gemfile.lock","license","readme","rakefile","setup","longleaf.gemspec"],"longSearchIndex":["af","appdeserializer","appvalidator","errno","fixitycheckservice","longleaf","longleaf::abstractcommand","longleaf::appfields","longleaf::applicationconfigdeserializer","longleaf::applicationconfigmanager","longleaf::applicationconfigvalidator","longleaf::cli","longleaf::checksummismatcherror","longleaf::configbuilder","longleaf::configurationerror","longleaf::configurationvalidator","longleaf::eventerror","longleaf::eventnames","longleaf::filehelpers","longleaf::filerecord","longleaf::fileselector","longleaf::fixitycheckservice","longleaf::invalidstoragepatherror","longleaf::logging","longleaf::logging::redirectinglogger","longleaf::longleaferror","longleaf::mdfields","longleaf::metadatadeserializer","longleaf::metadatadeserializer::mdf","longleaf::metadataerror","longleaf::metadatarecord","longleaf::metadataserializer","longleaf::metadataserializer::mdf","longleaf::preservationserviceerror","longleaf::rspec","longleaf::registercommand","longleaf::registerevent","longleaf::registrationerror","longleaf::servicecandidatefilesystemiterator","longleaf::servicecandidatelocator","longleaf::servicedatehelper","longleaf::servicedefinition","longleaf::servicedefinitionmanager","longleaf::servicedefinitionvalidator","longleaf::servicefields","longleaf::servicemanager","longleaf::servicemappingmanager","longleaf::servicemappingvalidator","longleaf::servicerecord","longleaf::storagelocation","longleaf::storagelocationmanager","longleaf::storagelocationunavailableerror","longleaf::storagelocationvalidator","longleaf::storagepathvalidator","longleaf::validateconfigcommand","mdf","object","longleaf::servicerecord#[]()","longleaf::servicerecord#[]=()","longleaf::metadatarecord#add_service()","longleaf::servicedatehelper::add_to_timestamp()","longleaf::servicemanager#applicable_for_event?()","longleaf::configurationvalidator::assert()","longleaf::storagelocation#available?()","longleaf::servicecandidatelocator#candidate_iterator()","object#create_metadata()","longleaf::filehelpers::create_test_file()","longleaf::filehelpers#create_test_file()","longleaf::logging::redirectinglogger#debug()","longleaf::metadatarecord#deregistered?()","longleaf::applicationconfigdeserializer::deserialize()","longleaf::metadatadeserializer::deserialize()","longleaf::servicecandidatefilesystemiterator#each()","longleaf::logging::redirectinglogger#error()","longleaf::registercommand#execute()","longleaf::validateconfigcommand#execute()","longleaf::logging::redirectinglogger#failure()","longleaf::logging::redirectinglogger#fatal()","longleaf::metadatadeserializer::from_yaml()","longleaf::configbuilder#get()","longleaf::storagelocationmanager#get_location_by_path()","longleaf::storagelocation#get_metadata_path_for()","longleaf::logging::redirectinglogger#info()","longleaf::logging#initialize_logger()","longleaf::logging::initialize_logger()","longleaf::fixitycheckservice#is_applicable?()","longleaf::servicemanager#list_service_definitions()","longleaf::metadatarecord#list_services()","longleaf::servicemappingmanager#list_services()","longleaf::applicationconfigdeserializer::load()","object#load_metadata_record()","longleaf::logging::logger()","longleaf::logging#logger()","object#make_file_record()","object#make_service_def()","longleaf::filehelpers#make_test_dir()","longleaf::filehelpers::make_test_dir()","object#make_test_file()","longleaf::configbuilder#map_services()","object#metadata_created()","longleaf::filerecord#metadata_path()","longleaf::metadataserializer::metadata_suffix()","longleaf::applicationconfigmanager::new()","longleaf::configbuilder::new()","longleaf::filerecord::new()","longleaf::fileselector::new()","longleaf::fixitycheckservice::new()","longleaf::logging::redirectinglogger::new()","longleaf::metadatarecord::new()","longleaf::registercommand::new()","longleaf::registerevent::new()","longleaf::servicecandidatefilesystemiterator::new()","longleaf::servicecandidatelocator::new()","longleaf::servicedefinition::new()","longleaf::servicedefinitionmanager::new()","longleaf::servicemanager::new()","longleaf::servicemappingmanager::new()","longleaf::servicerecord::new()","longleaf::storagelocation::new()","longleaf::storagelocationmanager::new()","longleaf::validateconfigcommand::new()","longleaf::servicecandidatefilesystemiterator#next_candidate()","longleaf::fileselector#next_path()","longleaf::logging::redirectinglogger#outcome()","longleaf::fixitycheckservice#perform()","longleaf::registerevent#perform()","longleaf::abstractcommand#record_failure()","longleaf::abstractcommand#record_success()","longleaf::cli#register()","longleaf::filerecord#registered?()","longleaf::abstractcommand#return_status()","longleaf::metadatarecord#service()","longleaf::cli#setup_logger()","longleaf::fileselector#storage_locations()","longleaf::logging::redirectinglogger#success()","longleaf::fileselector#target_paths()","longleaf::metadataserializer::to_hash()","longleaf::metadataserializer::to_yaml()","longleaf::logging::redirectinglogger#unknown()","object#update_metadata_record()","longleaf::applicationconfigvalidator::validate()","longleaf::storagepathvalidator::validate()","longleaf::cli#validate_config()","longleaf::servicedefinitionvalidator::validate_config()","longleaf::servicemappingvalidator::validate_config()","longleaf::storagelocationvalidator::validate_config()","longleaf::storagelocationmanager#verify_path_in_location()","longleaf::logging::redirectinglogger#warn()","longleaf::configbuilder#with_location()","longleaf::configbuilder#with_locations()","longleaf::configbuilder#with_mappings()","longleaf::configbuilder#with_service()","longleaf::configbuilder#with_services()","longleaf::metadataserializer::write()","object#write_metadata()","longleaf::configbuilder#write_to_yaml_file()","","","","","","",""],"info":[["AF","","AF.html","",""],["AppDeserializer","","AppDeserializer.html","",""],["AppValidator","","AppValidator.html","",""],["Errno","","Errno.html","",""],["FixityCheckService","","FixityCheckService.html","",""],["Longleaf","","Longleaf.html","","<p>Selects and allows for iteration over files which match a provided set of\nselection criteria\n<p>Iterator …\n"],["Longleaf::AbstractCommand","","Longleaf/AbstractCommand.html","",""],["Longleaf::AppFields","","Longleaf/AppFields.html","",""],["Longleaf::ApplicationConfigDeserializer","","Longleaf/ApplicationConfigDeserializer.html","",""],["Longleaf::ApplicationConfigManager","","Longleaf/ApplicationConfigManager.html","",""],["Longleaf::ApplicationConfigValidator","","Longleaf/ApplicationConfigValidator.html","",""],["Longleaf::CLI","","Longleaf/CLI.html","",""],["Longleaf::ChecksumMismatchError","","Longleaf/ChecksumMismatchError.html","",""],["Longleaf::ConfigBuilder","","Longleaf/ConfigBuilder.html","",""],["Longleaf::ConfigurationError","","Longleaf/ConfigurationError.html","",""],["Longleaf::ConfigurationValidator","","Longleaf/ConfigurationValidator.html","",""],["Longleaf::EventError","","Longleaf/EventError.html","",""],["Longleaf::EventNames","","Longleaf/EventNames.html","",""],["Longleaf::FileHelpers","","Longleaf/FileHelpers.html","",""],["Longleaf::FileRecord","","Longleaf/FileRecord.html","",""],["Longleaf::FileSelector","","Longleaf/FileSelector.html","",""],["Longleaf::FixityCheckService","","Longleaf/FixityCheckService.html","",""],["Longleaf::InvalidStoragePathError","","Longleaf/InvalidStoragePathError.html","",""],["Longleaf::Logging","","Longleaf/Logging.html","",""],["Longleaf::Logging::RedirectingLogger","","Longleaf/Logging/RedirectingLogger.html","",""],["Longleaf::LongleafError","","Longleaf/LongleafError.html","",""],["Longleaf::MDFields","","Longleaf/MDFields.html","",""],["Longleaf::MetadataDeserializer","","Longleaf/MetadataDeserializer.html","",""],["Longleaf::MetadataDeserializer::MDF","","Longleaf/MDFields.html","",""],["Longleaf::MetadataError","","Longleaf/MetadataError.html","",""],["Longleaf::MetadataRecord","","Longleaf/MetadataRecord.html","",""],["Longleaf::MetadataSerializer","","Longleaf/MetadataSerializer.html","",""],["Longleaf::MetadataSerializer::MDF","","Longleaf/MDFields.html","",""],["Longleaf::PreservationServiceError","","Longleaf/PreservationServiceError.html","",""],["Longleaf::RSpec","","Longleaf/RSpec.html","",""],["Longleaf::RegisterCommand","","Longleaf/RegisterCommand.html","",""],["Longleaf::RegisterEvent","","Longleaf/RegisterEvent.html","",""],["Longleaf::RegistrationError","","Longleaf/RegistrationError.html","",""],["Longleaf::ServiceCandidateFilesystemIterator","","Longleaf/ServiceCandidateFilesystemIterator.html","",""],["Longleaf::ServiceCandidateLocator","","Longleaf/ServiceCandidateLocator.html","",""],["Longleaf::ServiceDateHelper","","Longleaf/ServiceDateHelper.html","",""],["Longleaf::ServiceDefinition","","Longleaf/ServiceDefinition.html","",""],["Longleaf::ServiceDefinitionManager","","Longleaf/ServiceDefinitionManager.html","",""],["Longleaf::ServiceDefinitionValidator","","Longleaf/ServiceDefinitionValidator.html","",""],["Longleaf::ServiceFields","","Longleaf/ServiceFields.html","",""],["Longleaf::ServiceManager","","Longleaf/ServiceManager.html","",""],["Longleaf::ServiceMappingManager","","Longleaf/ServiceMappingManager.html","",""],["Longleaf::ServiceMappingValidator","","Longleaf/ServiceMappingValidator.html","",""],["Longleaf::ServiceRecord","","Longleaf/ServiceRecord.html","",""],["Longleaf::StorageLocation","","Longleaf/StorageLocation.html","",""],["Longleaf::StorageLocationManager","","Longleaf/StorageLocationManager.html","",""],["Longleaf::StorageLocationUnavailableError","","Longleaf/StorageLocationUnavailableError.html","",""],["Longleaf::StorageLocationValidator","","Longleaf/StorageLocationValidator.html","",""],["Longleaf::StoragePathValidator","","Longleaf/StoragePathValidator.html","",""],["Longleaf::ValidateConfigCommand","","Longleaf/ValidateConfigCommand.html","",""],["MDF","","MDF.html","",""],["Object","","Object.html","",""],["[]","Longleaf::ServiceRecord","Longleaf/ServiceRecord.html#method-i-5B-5D","(key)","<p>@return the value of a service property identified by key\n"],["[]=","Longleaf::ServiceRecord","Longleaf/ServiceRecord.html#method-i-5B-5D-3D","(key, value)","<p>set the value of a service property identified by key\n"],["add_service","Longleaf::MetadataRecord","Longleaf/MetadataRecord.html#method-i-add_service","(name, service = Longleaf::ServiceRecord.new)","<p>Adds a service to this record\n<p>@param name [String] identifier for the service being added @param\nservice_properties …\n"],["add_to_timestamp","Longleaf::ServiceDateHelper","Longleaf/ServiceDateHelper.html#method-c-add_to_timestamp","(timestamp, modifier)","<p>Adds the amount of time from modifier to the provided timestamp @param\ntimestamp [String] ISO-8601 timestamp …\n"],["applicable_for_event?","Longleaf::ServiceManager","Longleaf/ServiceManager.html#method-i-applicable_for_event-3F","(definition, event)","<p>Determines if a service is applicable for a specific preservation event\n"],["assert","Longleaf::ConfigurationValidator","Longleaf/ConfigurationValidator.html#method-c-assert","(fail_message, assertion_passed)",""],["available?","Longleaf::StorageLocation","Longleaf/StorageLocation.html#method-i-available-3F","()","<p>Checks that the path and metadata path defined in this location are\navailable @raise [StorageLocationUnavailableError] …\n"],["candidate_iterator","Longleaf::ServiceCandidateLocator","Longleaf/ServiceCandidateLocator.html#method-i-candidate_iterator","(file_selector, event)","<p>Get a iterator of the candidates matching the given FileSelector which need\nservices run. @param file_selector …\n"],["create_metadata","Object","Object.html#method-i-create_metadata","(file_path, services, app_config)",""],["create_test_file","Longleaf::FileHelpers","Longleaf/FileHelpers.html#method-c-create_test_file","(dir: nil, name: 'test_file', content: 'content')",""],["create_test_file","Longleaf::FileHelpers","Longleaf/FileHelpers.html#method-i-create_test_file","(dir: nil, name: 'test_file', content: 'content')",""],["debug","Longleaf::Logging::RedirectingLogger","Longleaf/Logging/RedirectingLogger.html#method-i-debug","(progname = nil, &block)",""],["deregistered?","Longleaf::MetadataRecord","Longleaf/MetadataRecord.html#method-i-deregistered-3F","()","<p>@return [Boolean] true if the record is deregistered\n"],["deserialize","Longleaf::ApplicationConfigDeserializer","Longleaf/ApplicationConfigDeserializer.html#method-c-deserialize","(config_path, format: 'yaml')","<p>Deserializes a valid application configuration file as a\nApplicationConfigManager option @param config_path …\n"],["deserialize","Longleaf::MetadataDeserializer","Longleaf/MetadataDeserializer.html#method-c-deserialize","(file_path:, format: 'yaml')","<p>Deserialize a file into a MetadataRecord object\n<p>@param file_path [String] path of the file to read. Required …\n"],["each","Longleaf::ServiceCandidateFilesystemIterator","Longleaf/ServiceCandidateFilesystemIterator.html#method-i-each","()","<p>Iterate through the candidates in this object and execute the provided\nblock with each candidate. A block …\n"],["error","Longleaf::Logging::RedirectingLogger","Longleaf/Logging/RedirectingLogger.html#method-i-error","(progname = nil, &block)",""],["execute","Longleaf::RegisterCommand","Longleaf/RegisterCommand.html#method-i-execute","(file_paths: nil, force: false, checksums: nil)","<p>Execute the register command on the given parameters\n"],["execute","Longleaf::ValidateConfigCommand","Longleaf/ValidateConfigCommand.html#method-i-execute","()",""],["failure","Longleaf::Logging::RedirectingLogger","Longleaf/Logging/RedirectingLogger.html#method-i-failure","(eventOrMessage, file_name = nil, message = nil, service = nil, error: nil)","<p>Logs a failure message to STDOUT, as well as STDERR at info level. If an\nerror was provided, it is logged …\n"],["fatal","Longleaf::Logging::RedirectingLogger","Longleaf/Logging/RedirectingLogger.html#method-i-fatal","(progname = nil, &block)",""],["from_yaml","Longleaf::MetadataDeserializer","Longleaf/MetadataDeserializer.html#method-c-from_yaml","(file_path)",""],["get","Longleaf::ConfigBuilder","Longleaf/ConfigBuilder.html#method-i-get","()","<p>@return the constructed configuration\n"],["get_location_by_path","Longleaf::StorageLocationManager","Longleaf/StorageLocationManager.html#method-i-get_location_by_path","(path)","<p>Get the StorageLocation object which should contain the given path @return\n[Longleaf::StorageLocation] …\n"],["get_metadata_path_for","Longleaf::StorageLocation","Longleaf/StorageLocation.html#method-i-get_metadata_path_for","(file_path)","<p>Get the path for the metadata file for the given file path located in this\nstorage location. @param  …\n"],["info","Longleaf::Logging::RedirectingLogger","Longleaf/Logging/RedirectingLogger.html#method-i-info","(progname = nil, &block)",""],["initialize_logger","Longleaf::Logging","Longleaf/Logging.html#method-i-initialize_logger","(failure_only, log_level, log_format, datetime_format)",""],["initialize_logger","Longleaf::Logging","Longleaf/Logging.html#method-c-initialize_logger","(failure_only, log_level, log_format, datetime_format)",""],["is_applicable?","Longleaf::FixityCheckService","Longleaf/FixityCheckService.html#method-i-is_applicable-3F","(event)","<p>Determine if this service is applicable for the provided event, given the\nconfigured service definition …\n"],["list_service_definitions","Longleaf::ServiceManager","Longleaf/ServiceManager.html#method-i-list_service_definitions","(location: nil, event: nil)","<p>Gets a list of ServiceDefinition objects which match the given criteria\n@param location [String] name …\n"],["list_services","Longleaf::MetadataRecord","Longleaf/MetadataRecord.html#method-i-list_services","()","<p>@return [Array&lt;String&gt;] a list of name identifiers for services\nregistered to this record\n"],["list_services","Longleaf::ServiceMappingManager","Longleaf/ServiceMappingManager.html#method-i-list_services","(loc_name)","<p>Gets a list of service names associated with the given location @param\nloc_name [String] name of the …\n"],["load","Longleaf::ApplicationConfigDeserializer","Longleaf/ApplicationConfigDeserializer.html#method-c-load","(config_path, format: 'yaml')","<p>Deserialize a configuration file into a hash @param config_path [String]\nfile path to the application …\n"],["load_metadata_record","Object","Object.html#method-i-load_metadata_record","(file_path)","<p>@returns [Longleaf::MetadataRecord] the metadata record for file_path\n"],["logger","Longleaf::Logging","Longleaf/Logging.html#method-c-logger","()","<p>Get the main logger for longleaf\n"],["logger","Longleaf::Logging","Longleaf/Logging.html#method-i-logger","()","<p>Get the main logger for longleaf\n"],["make_file_record","Object","Object.html#method-i-make_file_record","(file_path, md_rec)",""],["make_service_def","Object","Object.html#method-i-make_service_def","(digest_algs, absent_digest: nil)",""],["make_test_dir","Longleaf::FileHelpers","Longleaf/FileHelpers.html#method-i-make_test_dir","(parent: nil, name: nil)",""],["make_test_dir","Longleaf::FileHelpers","Longleaf/FileHelpers.html#method-c-make_test_dir","(parent: nil, name: 'dir')",""],["make_test_file","Object","Object.html#method-i-make_test_file","(dir, file_name = 'test_file', content = 'content')",""],["map_services","Longleaf::ConfigBuilder","Longleaf/ConfigBuilder.html#method-i-map_services","(loc_names, service_names)","<p>Add a mapping from one or more services to one or more location @param\nloc_names [Object] one or more …\n"],["metadata_created","Object","Object.html#method-i-metadata_created","(file_path, md_dir)",""],["metadata_path","Longleaf::FileRecord","Longleaf/FileRecord.html#method-i-metadata_path","()","<p>@return [String] path for the metadata file for this file\n"],["metadata_suffix","Longleaf::MetadataSerializer","Longleaf/MetadataSerializer.html#method-c-metadata_suffix","(format: 'yaml')",""],["new","Longleaf::ApplicationConfigManager","Longleaf/ApplicationConfigManager.html#method-c-new","(config)",""],["new","Longleaf::ConfigBuilder","Longleaf/ConfigBuilder.html#method-c-new","()",""],["new","Longleaf::FileRecord","Longleaf/FileRecord.html#method-c-new","(file_path, storage_location)","<p>@param file_path [String] path to the file @param storage_location\n[Longleaf::StorageLocation] storage …\n"],["new","Longleaf::FileSelector","Longleaf/FileSelector.html#method-c-new","(file_paths: nil, storage_locations: nil, app_config:)","<p>May only provide either file_paths or storage_locations\n"],["new","Longleaf::FixityCheckService","Longleaf/FixityCheckService.html#method-c-new","(service_def)","<p>Initialize a FixityCheckService from the given service definition\n<p>@param service_def [ServiceDefinition] …\n"],["new","Longleaf::Logging::RedirectingLogger","Longleaf/Logging/RedirectingLogger.html#method-c-new","(failure_only: false, log_level: 'WARN', log_format: nil, datetime_format: nil)","<p>@param failure_only [Boolean] If set to true, only failure messages will be\noutput to STDOUT @param  …\n"],["new","Longleaf::MetadataRecord","Longleaf/MetadataRecord.html#method-c-new","(properties: Hash.new, services: Hash.new, deregistered: nil, registered: nil, checksums: Hash.new, file_size: nil, last_modified: nil)","<p>@param properties [Hash] initial data properties for this record @param\nservices [Hash] initial service …\n"],["new","Longleaf::RegisterCommand","Longleaf/RegisterCommand.html#method-c-new","(config_path)",""],["new","Longleaf::RegisterEvent","Longleaf/RegisterEvent.html#method-c-new","(file_rec:, app_manager:, force: false, checksums: nil)","<p>@param file_rec [FileRecord] file record @param app_manager\n[ApplicationConfigManager] the application …\n"],["new","Longleaf::ServiceCandidateFilesystemIterator","Longleaf/ServiceCandidateFilesystemIterator.html#method-c-new","(file_selector, event, app_config)",""],["new","Longleaf::ServiceCandidateLocator","Longleaf/ServiceCandidateLocator.html#method-c-new","(app_config)",""],["new","Longleaf::ServiceDefinition","Longleaf/ServiceDefinition.html#method-c-new","(name:, work_script:, frequency: nil, delay: nil, properties: Hash.new)",""],["new","Longleaf::ServiceDefinitionManager","Longleaf/ServiceDefinitionManager.html#method-c-new","(config)",""],["new","Longleaf::ServiceManager","Longleaf/ServiceManager.html#method-c-new","(definition_manager:, mapping_manager:)",""],["new","Longleaf::ServiceMappingManager","Longleaf/ServiceMappingManager.html#method-c-new","(config)",""],["new","Longleaf::ServiceRecord","Longleaf/ServiceRecord.html#method-c-new","(properties: Hash.new, stale_replicas: false, timestamp: nil, run_needed: false)","<p>@param properties [Hash] initial properties for this service record\n"],["new","Longleaf::StorageLocation","Longleaf/StorageLocation.html#method-c-new","(name:, path:, metadata_path:)",""],["new","Longleaf::StorageLocationManager","Longleaf/StorageLocationManager.html#method-c-new","(config)",""],["new","Longleaf::ValidateConfigCommand","Longleaf/ValidateConfigCommand.html#method-c-new","(config_path)",""],["next_candidate","Longleaf::ServiceCandidateFilesystemIterator","Longleaf/ServiceCandidateFilesystemIterator.html#method-i-next_candidate","()","<p>Get the file record for the next candidate which needs services run which\nmatch the  provided file_selector …\n"],["next_path","Longleaf::FileSelector","Longleaf/FileSelector.html#method-i-next_path","()","<p>Get the next file path for this selector. @return [String] an absolute path\nto the next file targeted …\n"],["outcome","Longleaf::Logging::RedirectingLogger","Longleaf/Logging/RedirectingLogger.html#method-i-outcome","(outcome, eventOrMessage, file_name = nil, message = nil, service = nil, error = nil)","<p>Logs an outcome message to STDOUT, as well as STDERR at info level. If\nfile_name and message are nil, …\n"],["perform","Longleaf::FixityCheckService","Longleaf/FixityCheckService.html#method-i-perform","(file_rec, event)","<p>Perform all configured fixity checks on the provided file\n<p>@param file_rec [FileRecord] record representing …\n"],["perform","Longleaf::RegisterEvent","Longleaf/RegisterEvent.html#method-i-perform","()","<p>Perform a registration event on the given file @raises RegistrationError if\na file cannot be registered …\n"],["record_failure","Longleaf::AbstractCommand","Longleaf/AbstractCommand.html#method-i-record_failure","(*args)","<p>Record a failed operation to the output and the overall status of this\ncommand. @param args [Array] arguments …\n"],["record_success","Longleaf::AbstractCommand","Longleaf/AbstractCommand.html#method-i-record_success","(*args)","<p>Record a successful operation to the output and the overall status of this\ncommand. @param args [Array] …\n"],["register","Longleaf::CLI","Longleaf/CLI.html#method-i-register","()","<p>Register event command\n"],["registered?","Longleaf::FileRecord","Longleaf/FileRecord.html#method-i-registered-3F","()",""],["return_status","Longleaf::AbstractCommand","Longleaf/AbstractCommand.html#method-i-return_status","()","<p>@return [Integer] the return status for this command, where 0 indicates\nsuccess,\n\n<pre>1 indicates failure, ...</pre>\n"],["service","Longleaf::MetadataRecord","Longleaf/MetadataRecord.html#method-i-service","(name)","<p>@param name [String] name identifier of the service to retrieve @return\n[ServiceRecord] the ServiceRecord …\n"],["setup_logger","Longleaf::CLI","Longleaf/CLI.html#method-i-setup_logger","(options)",""],["storage_locations","Longleaf::FileSelector","Longleaf/FileSelector.html#method-i-storage_locations","()","<p>return [Array] a list of all storage locations being targeted by this\nselector\n"],["success","Longleaf::Logging::RedirectingLogger","Longleaf/Logging/RedirectingLogger.html#method-i-success","(eventOrMessage, file_name = nil, message = nil, service = nil)","<p>Logs a success message to STDOUT, as well as STDERR at info level. @param\neventOrMessage [String] name …\n"],["target_paths","Longleaf::FileSelector","Longleaf/FileSelector.html#method-i-target_paths","()","<p>@return [Array] a list of top level paths from which files will be selected\n"],["to_hash","Longleaf::MetadataSerializer","Longleaf/MetadataSerializer.html#method-c-to_hash","(metadata)",""],["to_yaml","Longleaf::MetadataSerializer","Longleaf/MetadataSerializer.html#method-c-to_yaml","(metadata)","<p>@param metadata [MetadataRecord] metadata record to transform @return\n[String] a yaml representation …\n"],["unknown","Longleaf::Logging::RedirectingLogger","Longleaf/Logging/RedirectingLogger.html#method-i-unknown","(progname = nil, &block)",""],["update_metadata_record","Object","Object.html#method-i-update_metadata_record","(file_path, metadata_record)",""],["validate","Longleaf::ApplicationConfigValidator","Longleaf/ApplicationConfigValidator.html#method-c-validate","(config)","<p>Validates the application configuration provided. Will raise\nConfigurationError if any portion of the …\n"],["validate","Longleaf::StoragePathValidator","Longleaf/StoragePathValidator.html#method-c-validate","(path)","<p>Checks that the given path is a syntactically valid storage path @param\npath [String] file storage path …\n"],["validate_config","Longleaf::CLI","Longleaf/CLI.html#method-i-validate_config","()","<p>Application configuration validation command\n"],["validate_config","Longleaf::ServiceDefinitionValidator","Longleaf/ServiceDefinitionValidator.html#method-c-validate_config","(config)","<p>Validates configuration to ensure that it is syntactically correct and does\nnot violate  schema requirements. …\n"],["validate_config","Longleaf::ServiceMappingValidator","Longleaf/ServiceMappingValidator.html#method-c-validate_config","(config)","<p>Validates service mapping configuration to ensure that it is syntactically\nand referentially correct. …\n"],["validate_config","Longleaf::StorageLocationValidator","Longleaf/StorageLocationValidator.html#method-c-validate_config","(config)","<p>Validates configuration to ensure that it is syntactically correct and does\nnot violate  schema and uniqueness …\n"],["verify_path_in_location","Longleaf::StorageLocationManager","Longleaf/StorageLocationManager.html#method-i-verify_path_in_location","(path, expected_loc = nil)","<p>Raises a StorageLocationUnavailableError if the given path is not in a\nknown storage location,\n\n<pre>or if it ...</pre>\n"],["warn","Longleaf::Logging::RedirectingLogger","Longleaf/Logging/RedirectingLogger.html#method-i-warn","(progname = nil, &block)",""],["with_location","Longleaf::ConfigBuilder","Longleaf/ConfigBuilder.html#method-i-with_location","(name:, path: '/file/path/', md_path: '/metadata/path/')","<p>Add a &#39;location&#39; to the config @param name [String] name of the\nlocation @param path [String] …\n"],["with_locations","Longleaf::ConfigBuilder","Longleaf/ConfigBuilder.html#method-i-with_locations","(locations = Hash.new)","<p>Add a root &#39;locations&#39; field to the config @param locations [Hash]\nvalue for the locations fields. …\n"],["with_mappings","Longleaf::ConfigBuilder","Longleaf/ConfigBuilder.html#method-i-with_mappings","(mappings = Hash.new)","<p>Adds a &#39;service_mappings&#39; section to the config @param mappings\n[Object] the mappings config …\n"],["with_service","Longleaf::ConfigBuilder","Longleaf/ConfigBuilder.html#method-i-with_service","(name:, work_script: 'some_pres_service.rb', frequency: nil, delay: nil, properties: nil)","<p>Add a &#39;service&#39; to the config @param name [String] name of the\nservice @param work_script [String] …\n"],["with_services","Longleaf::ConfigBuilder","Longleaf/ConfigBuilder.html#method-i-with_services","(services = Hash.new)","<p>Add a root &#39;services&#39; field to the config @param services [Hash]\nvalue for the services field. …\n"],["write","Longleaf::MetadataSerializer","Longleaf/MetadataSerializer.html#method-c-write","(metadata:, file_path:, format: 'yaml')","<p>Serialize the contents of the provided metadata record to the specified\npath\n<p>@param metadata [MetadataRecord] …\n"],["write_metadata","Object","Object.html#method-i-write_metadata","(md_rec, file_path, app_config)",""],["write_to_yaml_file","Longleaf::ConfigBuilder","Longleaf/ConfigBuilder.html#method-i-write_to_yaml_file","()","<p>Writes the configuration from this builder into a temporary file @return\nthe file path of the config …\n"],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p># Specify your gem&#39;s dependencies in longleaf.gemspec gemspec\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  longleaf (0.1.0)\n    thor (~&gt; 0.20.0)\n    yard (~&gt; 0.9.16)</pre>\n<p>GEM\n"],["LICENSE","","LICENSE_txt.html","","<p>Copyright 2018 UNC Libraries\n<p>Licensed under the Apache License, Version 2.0 (the “License”); …\n"],["README","","README_md.html","","<p>Longleaf\n<p>Longleaf is a command-line tool which allows users to configure a set of\nstorage locations and …\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks” require “rspec/core/rake_task”\n<p>RSpec::Core::RakeTask.new …\n"],["setup","","bin/setup.html","","<p>#!/usr/bin/env bash set -euo pipefail IFS=$&#39;nt&#39; set -vx\n<p>bundle install\n<p># Do any other automated …\n"],["longleaf.gemspec","","longleaf_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"]]}}